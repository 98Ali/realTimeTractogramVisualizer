//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21124049
// Cuda compilation tools, release 8.0, V8.0.44
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_30
.address_size 64

	// .globl	_Z17CylinderIntersecti
.global .align 1 .b8 vertices[1];
.global .align 1 .b8 lines[1];
.global .align 1 .b8 texcoords[1];
.global .align 1 .b8 vertexcolors[1];
.global .align 4 .b8 ray[36];
.global .align 8 .b8 irec[48];
.global .align 4 .f32 cylinder_radius;
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4irecE[8] = {82, 97, 121, 0, 48, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo15cylinder_radiusE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_typename4irecE[19] = {73, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 82, 101, 99, 111, 114, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_typename15cylinder_radiusE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4irecE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum15cylinder_radiusE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic4irecE[15] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 105, 114, 101, 99, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic15cylinder_radiusE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4irecE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation15cylinder_radiusE[1];

.visible .entry _Z17CylinderIntersecti(
	.param .u32 _Z17CylinderIntersecti_param_0
)
{
	.reg .pred 	%p<14>;
	.reg .f32 	%f<171>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<87>;


	ld.param.u32 	%r1, [_Z17CylinderIntersecti_param_0];
	cvt.s64.s32	%rd5, %r1;
	mov.u64 	%rd21, lines;
	cvta.global.u64 	%rd4, %rd21;
	mov.u32 	%r6, 1;
	mov.u32 	%r3, 8;
	mov.u64 	%rd20, 0;
	// inline asm
	call (%rd3), _rt_buffer_get_64, (%rd4, %r6, %r3, %rd5, %rd20, %rd20, %rd20);
	// inline asm
	ld.v2.u32 	{%r8, %r9}, [%rd3];
	cvt.s64.s32	%rd17, %r9;
	cvt.s64.s32	%rd11, %r8;
	mov.u64 	%rd22, vertices;
	cvta.global.u64 	%rd10, %rd22;
	mov.u32 	%r7, 16;
	// inline asm
	call (%rd9), _rt_buffer_get_64, (%rd10, %r6, %r7, %rd11, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f31, %f32, %f33, %f34}, [%rd9];
	// inline asm
	call (%rd15), _rt_buffer_get_64, (%rd10, %r6, %r7, %rd17, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f39, %f40, %f41, %f42}, [%rd15];
	add.ftz.f32 	%f47, %f34, %f42;
	cvt.ftz.f64.f32	%fd1, %f47;
	mul.f64 	%fd2, %fd1, 0d3FE0000000000000;
	ld.global.f32 	%f48, [cylinder_radius];
	cvt.ftz.f64.f32	%fd3, %f48;
	mul.f64 	%fd4, %fd3, %fd2;
	cvt.rn.ftz.f32.f64	%f1, %fd4;
	ld.global.f32 	%f49, [ray];
	sub.ftz.f32 	%f2, %f49, %f31;
	ld.global.f32 	%f50, [ray+4];
	sub.ftz.f32 	%f3, %f50, %f32;
	ld.global.f32 	%f51, [ray+8];
	sub.ftz.f32 	%f4, %f51, %f33;
	sub.ftz.f32 	%f5, %f39, %f31;
	sub.ftz.f32 	%f6, %f40, %f32;
	sub.ftz.f32 	%f7, %f41, %f33;
	mul.ftz.f32 	%f52, %f6, %f6;
	fma.rn.ftz.f32 	%f53, %f5, %f5, %f52;
	fma.rn.ftz.f32 	%f8, %f7, %f7, %f53;
	mul.ftz.f32 	%f54, %f3, %f3;
	fma.rn.ftz.f32 	%f55, %f2, %f2, %f54;
	fma.rn.ftz.f32 	%f9, %f4, %f4, %f55;
	ld.global.f32 	%f12, [ray+20];
	ld.global.f32 	%f10, [ray+12];
	ld.global.f32 	%f11, [ray+16];
	mul.ftz.f32 	%f56, %f6, %f11;
	fma.rn.ftz.f32 	%f57, %f5, %f10, %f56;
	fma.rn.ftz.f32 	%f13, %f7, %f12, %f57;
	mul.ftz.f32 	%f58, %f6, %f3;
	fma.rn.ftz.f32 	%f59, %f5, %f2, %f58;
	fma.rn.ftz.f32 	%f14, %f7, %f4, %f59;
	mul.ftz.f32 	%f60, %f3, %f11;
	fma.rn.ftz.f32 	%f61, %f2, %f10, %f60;
	fma.rn.ftz.f32 	%f15, %f4, %f12, %f61;
	setp.eq.ftz.f32	%p1, %f8, 0f00000000;
	mov.f32 	%f30, 0f3F800000;
	mov.f32 	%f170, %f30;
	@%p1 bra 	BB0_2;

	rcp.approx.ftz.f32 	%f16, %f8;
	mov.f32 	%f170, %f16;

BB0_2:
	mov.f32 	%f17, %f170;
	mul.ftz.f32 	%f18, %f13, %f17;
	mul.ftz.f32 	%f62, %f13, %f18;
	sub.ftz.f32 	%f19, %f30, %f62;
	mul.ftz.f32 	%f64, %f14, %f18;
	sub.ftz.f32 	%f20, %f15, %f64;
	mul.ftz.f32 	%f21, %f14, %f17;
	mul.ftz.f32 	%f65, %f14, %f21;
	sub.ftz.f32 	%f66, %f9, %f65;
	mul.ftz.f32 	%f67, %f1, %f1;
	sub.ftz.f32 	%f68, %f66, %f67;
	mul.ftz.f32 	%f69, %f20, %f20;
	mul.ftz.f32 	%f70, %f19, %f68;
	sub.ftz.f32 	%f22, %f69, %f70;
	setp.leu.ftz.f32	%p2, %f22, 0f00000000;
	@%p2 bra 	BB0_15;

	sqrt.approx.ftz.f32 	%f23, %f22;
	neg.ftz.f32 	%f71, %f20;
	sub.ftz.f32 	%f72, %f71, %f23;
	div.approx.ftz.f32 	%f24, %f72, %f19;
	fma.rn.ftz.f32 	%f25, %f18, %f24, %f21;
	setp.ge.ftz.f32	%p3, %f25, 0f00000000;
	setp.le.ftz.f32	%p4, %f25, 0f3F800000;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB0_9;
	bra.uni 	BB0_4;

BB0_4:
	add.ftz.f32 	%f73, %f24, 0f00000000;
	// inline asm
	call (%r12), _rt_potential_intersection, (%f73);
	// inline asm
	setp.eq.s32	%p6, %r12, 0;
	@%p6 bra 	BB0_9;

	mul.ftz.f32 	%f74, %f5, %f25;
	fma.rn.ftz.f32 	%f75, %f10, %f24, %f2;
	fma.rn.ftz.f32 	%f76, %f11, %f24, %f3;
	fma.rn.ftz.f32 	%f77, %f12, %f24, %f4;
	st.global.u32 	[irec+44], %r1;
	sub.ftz.f32 	%f78, %f75, %f74;
	mul.ftz.f32 	%f79, %f6, %f25;
	sub.ftz.f32 	%f80, %f76, %f79;
	mul.ftz.f32 	%f81, %f7, %f25;
	sub.ftz.f32 	%f82, %f77, %f81;
	rcp.approx.ftz.f32 	%f83, %f1;
	mul.ftz.f32 	%f84, %f78, %f83;
	mul.ftz.f32 	%f85, %f82, %f83;
	st.global.v2.f32 	[irec+8], {%f85, %f84};
	mul.ftz.f32 	%f86, %f80, %f83;
	st.global.v2.f32 	[irec+16], {%f86, %f85};
	st.global.v2.f32 	[irec], {%f84, %f86};
	mov.u64 	%rd40, texcoords;
	cvta.global.u64 	%rd24, %rd40;
	// inline asm
	call (%rd23), _rt_buffer_get_64, (%rd24, %r6, %r3, %rd11, %rd20, %rd20, %rd20);
	// inline asm
	mov.f32 	%f87, 0f3F800000;
	sub.ftz.f32 	%f26, %f87, %f25;
	ld.v2.f32 	{%f88, %f89}, [%rd23];
	// inline asm
	call (%rd29), _rt_buffer_get_64, (%rd24, %r6, %r3, %rd17, %rd20, %rd20, %rd20);
	// inline asm
	ld.v2.f32 	{%f92, %f93}, [%rd29];
	mul.ftz.f32 	%f95, %f25, %f92;
	mul.ftz.f32 	%f97, %f25, %f93;
	fma.rn.ftz.f32 	%f98, %f26, %f89, %f97;
	fma.rn.ftz.f32 	%f99, %f26, %f88, %f95;
	st.global.v2.f32 	[irec+24], {%f99, %f98};
	mov.u64 	%rd41, vertexcolors;
	cvta.global.u64 	%rd39, %rd41;
	// inline asm
	call (%rd35, %rd36, %rd37, %rd38), _rt_buffer_get_size_64, (%rd39, %r6, %r7);
	// inline asm
	cvt.u32.u64	%r19, %rd35;
	setp.eq.s32	%p7, %r19, 0;
	@%p7 bra 	BB0_7;

	// inline asm
	call (%rd42), _rt_buffer_get_64, (%rd39, %r6, %r7, %rd11, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f100, %f101, %f102, %f103}, [%rd42];
	// inline asm
	call (%rd48), _rt_buffer_get_64, (%rd39, %r6, %r7, %rd17, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f107, %f108, %f109, %f110}, [%rd48];
	mul.ftz.f32 	%f112, %f25, %f107;
	mul.ftz.f32 	%f114, %f25, %f108;
	mul.ftz.f32 	%f116, %f25, %f109;
	fma.rn.ftz.f32 	%f117, %f26, %f102, %f116;
	fma.rn.ftz.f32 	%f118, %f26, %f101, %f114;
	fma.rn.ftz.f32 	%f119, %f26, %f100, %f112;
	st.global.v2.f32 	[irec+32], {%f119, %f118};
	st.global.f32 	[irec+40], %f117;
	bra.uni 	BB0_8;

BB0_7:
	mov.u32 	%r24, 1065353216;
	st.global.u32 	[irec+40], %r24;
	st.global.v2.f32 	[irec+32], {%f87, %f87};

BB0_8:
	mov.u32 	%r26, 0;
	// inline asm
	call (%r25), _rt_report_intersection, (%r26);
	// inline asm
	setp.ne.s32	%p8, %r25, 0;
	@%p8 bra 	BB0_15;

BB0_9:
	sub.ftz.f32 	%f121, %f23, %f20;
	div.approx.ftz.f32 	%f27, %f121, %f19;
	fma.rn.ftz.f32 	%f28, %f18, %f27, %f21;
	setp.ge.ftz.f32	%p9, %f28, 0f00000000;
	setp.le.ftz.f32	%p10, %f28, 0f3F800000;
	and.pred  	%p11, %p9, %p10;
	@!%p11 bra 	BB0_15;
	bra.uni 	BB0_10;

BB0_10:
	// inline asm
	call (%r27), _rt_potential_intersection, (%f27);
	// inline asm
	setp.eq.s32	%p12, %r27, 0;
	@%p12 bra 	BB0_15;

	mul.ftz.f32 	%f123, %f5, %f28;
	fma.rn.ftz.f32 	%f124, %f10, %f27, %f2;
	fma.rn.ftz.f32 	%f125, %f11, %f27, %f3;
	fma.rn.ftz.f32 	%f126, %f12, %f27, %f4;
	st.global.u32 	[irec+44], %r1;
	sub.ftz.f32 	%f127, %f124, %f123;
	mul.ftz.f32 	%f128, %f6, %f28;
	sub.ftz.f32 	%f129, %f125, %f128;
	mul.ftz.f32 	%f130, %f7, %f28;
	sub.ftz.f32 	%f131, %f126, %f130;
	rcp.approx.ftz.f32 	%f132, %f1;
	mul.ftz.f32 	%f133, %f127, %f132;
	mul.ftz.f32 	%f134, %f131, %f132;
	st.global.v2.f32 	[irec+8], {%f134, %f133};
	mul.ftz.f32 	%f135, %f129, %f132;
	st.global.v2.f32 	[irec+16], {%f135, %f134};
	st.global.v2.f32 	[irec], {%f133, %f135};
	mov.u64 	%rd72, texcoords;
	cvta.global.u64 	%rd56, %rd72;
	// inline asm
	call (%rd55), _rt_buffer_get_64, (%rd56, %r6, %r3, %rd11, %rd20, %rd20, %rd20);
	// inline asm
	mov.f32 	%f136, 0f3F800000;
	sub.ftz.f32 	%f29, %f136, %f28;
	ld.v2.f32 	{%f137, %f138}, [%rd55];
	// inline asm
	call (%rd61), _rt_buffer_get_64, (%rd56, %r6, %r3, %rd17, %rd20, %rd20, %rd20);
	// inline asm
	ld.v2.f32 	{%f141, %f142}, [%rd61];
	mul.ftz.f32 	%f144, %f28, %f141;
	mul.ftz.f32 	%f146, %f28, %f142;
	fma.rn.ftz.f32 	%f147, %f29, %f138, %f146;
	fma.rn.ftz.f32 	%f148, %f29, %f137, %f144;
	st.global.v2.f32 	[irec+24], {%f148, %f147};
	mov.u64 	%rd73, vertexcolors;
	cvta.global.u64 	%rd71, %rd73;
	// inline asm
	call (%rd67, %rd68, %rd69, %rd70), _rt_buffer_get_size_64, (%rd71, %r6, %r7);
	// inline asm
	cvt.u32.u64	%r34, %rd67;
	setp.eq.s32	%p13, %r34, 0;
	@%p13 bra 	BB0_13;

	// inline asm
	call (%rd74), _rt_buffer_get_64, (%rd71, %r6, %r7, %rd11, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f149, %f150, %f151, %f152}, [%rd74];
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd71, %r6, %r7, %rd17, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f156, %f157, %f158, %f159}, [%rd80];
	mul.ftz.f32 	%f161, %f28, %f156;
	mul.ftz.f32 	%f163, %f28, %f157;
	mul.ftz.f32 	%f165, %f28, %f158;
	fma.rn.ftz.f32 	%f166, %f29, %f151, %f165;
	fma.rn.ftz.f32 	%f167, %f29, %f150, %f163;
	fma.rn.ftz.f32 	%f168, %f29, %f149, %f161;
	st.global.v2.f32 	[irec+32], {%f168, %f167};
	st.global.f32 	[irec+40], %f166;
	bra.uni 	BB0_14;

BB0_13:
	mov.u32 	%r39, 1065353216;
	st.global.u32 	[irec+40], %r39;
	st.global.v2.f32 	[irec+32], {%f136, %f136};

BB0_14:
	mov.u32 	%r41, 0;
	// inline asm
	call (%r40), _rt_report_intersection, (%r41);
	// inline asm

BB0_15:
	ret;
}

	// .globl	_Z24CylinderIntersect_robusti
.visible .entry _Z24CylinderIntersect_robusti(
	.param .u32 _Z24CylinderIntersect_robusti_param_0
)
{
	.reg .pred 	%p<14>;
	.reg .f32 	%f<171>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<87>;


	ld.param.u32 	%r1, [_Z24CylinderIntersect_robusti_param_0];
	cvt.s64.s32	%rd5, %r1;
	mov.u64 	%rd21, lines;
	cvta.global.u64 	%rd4, %rd21;
	mov.u32 	%r6, 1;
	mov.u32 	%r3, 8;
	mov.u64 	%rd20, 0;
	// inline asm
	call (%rd3), _rt_buffer_get_64, (%rd4, %r6, %r3, %rd5, %rd20, %rd20, %rd20);
	// inline asm
	ld.v2.u32 	{%r8, %r9}, [%rd3];
	cvt.s64.s32	%rd17, %r9;
	cvt.s64.s32	%rd11, %r8;
	mov.u64 	%rd22, vertices;
	cvta.global.u64 	%rd10, %rd22;
	mov.u32 	%r7, 16;
	// inline asm
	call (%rd9), _rt_buffer_get_64, (%rd10, %r6, %r7, %rd11, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f31, %f32, %f33, %f34}, [%rd9];
	// inline asm
	call (%rd15), _rt_buffer_get_64, (%rd10, %r6, %r7, %rd17, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f39, %f40, %f41, %f42}, [%rd15];
	add.ftz.f32 	%f47, %f34, %f42;
	cvt.ftz.f64.f32	%fd1, %f47;
	mul.f64 	%fd2, %fd1, 0d3FE0000000000000;
	ld.global.f32 	%f48, [cylinder_radius];
	cvt.ftz.f64.f32	%fd3, %f48;
	mul.f64 	%fd4, %fd3, %fd2;
	cvt.rn.ftz.f32.f64	%f1, %fd4;
	ld.global.f32 	%f49, [ray];
	sub.ftz.f32 	%f2, %f49, %f31;
	ld.global.f32 	%f50, [ray+4];
	sub.ftz.f32 	%f3, %f50, %f32;
	ld.global.f32 	%f51, [ray+8];
	sub.ftz.f32 	%f4, %f51, %f33;
	sub.ftz.f32 	%f5, %f39, %f31;
	sub.ftz.f32 	%f6, %f40, %f32;
	sub.ftz.f32 	%f7, %f41, %f33;
	mul.ftz.f32 	%f52, %f6, %f6;
	fma.rn.ftz.f32 	%f53, %f5, %f5, %f52;
	fma.rn.ftz.f32 	%f8, %f7, %f7, %f53;
	mul.ftz.f32 	%f54, %f3, %f3;
	fma.rn.ftz.f32 	%f55, %f2, %f2, %f54;
	fma.rn.ftz.f32 	%f9, %f4, %f4, %f55;
	ld.global.f32 	%f12, [ray+20];
	ld.global.f32 	%f10, [ray+12];
	ld.global.f32 	%f11, [ray+16];
	mul.ftz.f32 	%f56, %f6, %f11;
	fma.rn.ftz.f32 	%f57, %f5, %f10, %f56;
	fma.rn.ftz.f32 	%f13, %f7, %f12, %f57;
	mul.ftz.f32 	%f58, %f6, %f3;
	fma.rn.ftz.f32 	%f59, %f5, %f2, %f58;
	fma.rn.ftz.f32 	%f14, %f7, %f4, %f59;
	mul.ftz.f32 	%f60, %f3, %f11;
	fma.rn.ftz.f32 	%f61, %f2, %f10, %f60;
	fma.rn.ftz.f32 	%f15, %f4, %f12, %f61;
	setp.eq.ftz.f32	%p1, %f8, 0f00000000;
	mov.f32 	%f30, 0f3F800000;
	mov.f32 	%f170, %f30;
	@%p1 bra 	BB1_2;

	rcp.approx.ftz.f32 	%f16, %f8;
	mov.f32 	%f170, %f16;

BB1_2:
	mov.f32 	%f17, %f170;
	mul.ftz.f32 	%f18, %f13, %f17;
	mul.ftz.f32 	%f62, %f13, %f18;
	sub.ftz.f32 	%f19, %f30, %f62;
	mul.ftz.f32 	%f64, %f14, %f18;
	sub.ftz.f32 	%f20, %f15, %f64;
	mul.ftz.f32 	%f21, %f14, %f17;
	mul.ftz.f32 	%f65, %f14, %f21;
	sub.ftz.f32 	%f66, %f9, %f65;
	mul.ftz.f32 	%f67, %f1, %f1;
	sub.ftz.f32 	%f68, %f66, %f67;
	mul.ftz.f32 	%f69, %f20, %f20;
	mul.ftz.f32 	%f70, %f19, %f68;
	sub.ftz.f32 	%f22, %f69, %f70;
	setp.leu.ftz.f32	%p2, %f22, 0f00000000;
	@%p2 bra 	BB1_15;

	sqrt.approx.ftz.f32 	%f23, %f22;
	neg.ftz.f32 	%f71, %f20;
	sub.ftz.f32 	%f72, %f71, %f23;
	div.approx.ftz.f32 	%f24, %f72, %f19;
	fma.rn.ftz.f32 	%f25, %f18, %f24, %f21;
	setp.ge.ftz.f32	%p3, %f25, 0f00000000;
	setp.le.ftz.f32	%p4, %f25, 0f3F800000;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB1_9;
	bra.uni 	BB1_4;

BB1_4:
	add.ftz.f32 	%f73, %f24, 0f00000000;
	// inline asm
	call (%r12), _rt_potential_intersection, (%f73);
	// inline asm
	setp.eq.s32	%p6, %r12, 0;
	@%p6 bra 	BB1_9;

	mul.ftz.f32 	%f74, %f5, %f25;
	fma.rn.ftz.f32 	%f75, %f10, %f24, %f2;
	fma.rn.ftz.f32 	%f76, %f11, %f24, %f3;
	fma.rn.ftz.f32 	%f77, %f12, %f24, %f4;
	st.global.u32 	[irec+44], %r1;
	sub.ftz.f32 	%f78, %f75, %f74;
	mul.ftz.f32 	%f79, %f6, %f25;
	sub.ftz.f32 	%f80, %f76, %f79;
	mul.ftz.f32 	%f81, %f7, %f25;
	sub.ftz.f32 	%f82, %f77, %f81;
	rcp.approx.ftz.f32 	%f83, %f1;
	mul.ftz.f32 	%f84, %f78, %f83;
	mul.ftz.f32 	%f85, %f82, %f83;
	st.global.v2.f32 	[irec+8], {%f85, %f84};
	mul.ftz.f32 	%f86, %f80, %f83;
	st.global.v2.f32 	[irec+16], {%f86, %f85};
	st.global.v2.f32 	[irec], {%f84, %f86};
	mov.u64 	%rd40, texcoords;
	cvta.global.u64 	%rd24, %rd40;
	// inline asm
	call (%rd23), _rt_buffer_get_64, (%rd24, %r6, %r3, %rd11, %rd20, %rd20, %rd20);
	// inline asm
	mov.f32 	%f87, 0f3F800000;
	sub.ftz.f32 	%f26, %f87, %f25;
	ld.v2.f32 	{%f88, %f89}, [%rd23];
	// inline asm
	call (%rd29), _rt_buffer_get_64, (%rd24, %r6, %r3, %rd17, %rd20, %rd20, %rd20);
	// inline asm
	ld.v2.f32 	{%f92, %f93}, [%rd29];
	mul.ftz.f32 	%f95, %f25, %f92;
	mul.ftz.f32 	%f97, %f25, %f93;
	fma.rn.ftz.f32 	%f98, %f26, %f89, %f97;
	fma.rn.ftz.f32 	%f99, %f26, %f88, %f95;
	st.global.v2.f32 	[irec+24], {%f99, %f98};
	mov.u64 	%rd41, vertexcolors;
	cvta.global.u64 	%rd39, %rd41;
	// inline asm
	call (%rd35, %rd36, %rd37, %rd38), _rt_buffer_get_size_64, (%rd39, %r6, %r7);
	// inline asm
	cvt.u32.u64	%r19, %rd35;
	setp.eq.s32	%p7, %r19, 0;
	@%p7 bra 	BB1_7;

	// inline asm
	call (%rd42), _rt_buffer_get_64, (%rd39, %r6, %r7, %rd11, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f100, %f101, %f102, %f103}, [%rd42];
	// inline asm
	call (%rd48), _rt_buffer_get_64, (%rd39, %r6, %r7, %rd17, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f107, %f108, %f109, %f110}, [%rd48];
	mul.ftz.f32 	%f112, %f25, %f107;
	mul.ftz.f32 	%f114, %f25, %f108;
	mul.ftz.f32 	%f116, %f25, %f109;
	fma.rn.ftz.f32 	%f117, %f26, %f102, %f116;
	fma.rn.ftz.f32 	%f118, %f26, %f101, %f114;
	fma.rn.ftz.f32 	%f119, %f26, %f100, %f112;
	st.global.v2.f32 	[irec+32], {%f119, %f118};
	st.global.f32 	[irec+40], %f117;
	bra.uni 	BB1_8;

BB1_7:
	mov.u32 	%r24, 1065353216;
	st.global.u32 	[irec+40], %r24;
	st.global.v2.f32 	[irec+32], {%f87, %f87};

BB1_8:
	mov.u32 	%r26, 0;
	// inline asm
	call (%r25), _rt_report_intersection, (%r26);
	// inline asm
	setp.ne.s32	%p8, %r25, 0;
	@%p8 bra 	BB1_15;

BB1_9:
	sub.ftz.f32 	%f121, %f23, %f20;
	div.approx.ftz.f32 	%f27, %f121, %f19;
	fma.rn.ftz.f32 	%f28, %f18, %f27, %f21;
	setp.ge.ftz.f32	%p9, %f28, 0f00000000;
	setp.le.ftz.f32	%p10, %f28, 0f3F800000;
	and.pred  	%p11, %p9, %p10;
	@!%p11 bra 	BB1_15;
	bra.uni 	BB1_10;

BB1_10:
	// inline asm
	call (%r27), _rt_potential_intersection, (%f27);
	// inline asm
	setp.eq.s32	%p12, %r27, 0;
	@%p12 bra 	BB1_15;

	mul.ftz.f32 	%f123, %f5, %f28;
	fma.rn.ftz.f32 	%f124, %f10, %f27, %f2;
	fma.rn.ftz.f32 	%f125, %f11, %f27, %f3;
	fma.rn.ftz.f32 	%f126, %f12, %f27, %f4;
	st.global.u32 	[irec+44], %r1;
	sub.ftz.f32 	%f127, %f124, %f123;
	mul.ftz.f32 	%f128, %f6, %f28;
	sub.ftz.f32 	%f129, %f125, %f128;
	mul.ftz.f32 	%f130, %f7, %f28;
	sub.ftz.f32 	%f131, %f126, %f130;
	rcp.approx.ftz.f32 	%f132, %f1;
	mul.ftz.f32 	%f133, %f127, %f132;
	mul.ftz.f32 	%f134, %f131, %f132;
	st.global.v2.f32 	[irec+8], {%f134, %f133};
	mul.ftz.f32 	%f135, %f129, %f132;
	st.global.v2.f32 	[irec+16], {%f135, %f134};
	st.global.v2.f32 	[irec], {%f133, %f135};
	mov.u64 	%rd72, texcoords;
	cvta.global.u64 	%rd56, %rd72;
	// inline asm
	call (%rd55), _rt_buffer_get_64, (%rd56, %r6, %r3, %rd11, %rd20, %rd20, %rd20);
	// inline asm
	mov.f32 	%f136, 0f3F800000;
	sub.ftz.f32 	%f29, %f136, %f28;
	ld.v2.f32 	{%f137, %f138}, [%rd55];
	// inline asm
	call (%rd61), _rt_buffer_get_64, (%rd56, %r6, %r3, %rd17, %rd20, %rd20, %rd20);
	// inline asm
	ld.v2.f32 	{%f141, %f142}, [%rd61];
	mul.ftz.f32 	%f144, %f28, %f141;
	mul.ftz.f32 	%f146, %f28, %f142;
	fma.rn.ftz.f32 	%f147, %f29, %f138, %f146;
	fma.rn.ftz.f32 	%f148, %f29, %f137, %f144;
	st.global.v2.f32 	[irec+24], {%f148, %f147};
	mov.u64 	%rd73, vertexcolors;
	cvta.global.u64 	%rd71, %rd73;
	// inline asm
	call (%rd67, %rd68, %rd69, %rd70), _rt_buffer_get_size_64, (%rd71, %r6, %r7);
	// inline asm
	cvt.u32.u64	%r34, %rd67;
	setp.eq.s32	%p13, %r34, 0;
	@%p13 bra 	BB1_13;

	// inline asm
	call (%rd74), _rt_buffer_get_64, (%rd71, %r6, %r7, %rd11, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f149, %f150, %f151, %f152}, [%rd74];
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd71, %r6, %r7, %rd17, %rd20, %rd20, %rd20);
	// inline asm
	ld.v4.f32 	{%f156, %f157, %f158, %f159}, [%rd80];
	mul.ftz.f32 	%f161, %f28, %f156;
	mul.ftz.f32 	%f163, %f28, %f157;
	mul.ftz.f32 	%f165, %f28, %f158;
	fma.rn.ftz.f32 	%f166, %f29, %f151, %f165;
	fma.rn.ftz.f32 	%f167, %f29, %f150, %f163;
	fma.rn.ftz.f32 	%f168, %f29, %f149, %f161;
	st.global.v2.f32 	[irec+32], {%f168, %f167};
	st.global.f32 	[irec+40], %f166;
	bra.uni 	BB1_14;

BB1_13:
	mov.u32 	%r39, 1065353216;
	st.global.u32 	[irec+40], %r39;
	st.global.v2.f32 	[irec+32], {%f136, %f136};

BB1_14:
	mov.u32 	%r41, 0;
	// inline asm
	call (%r40), _rt_report_intersection, (%r41);
	// inline asm

BB1_15:
	ret;
}

	// .globl	_Z14CylinderBoundsiPf
.visible .entry _Z14CylinderBoundsiPf(
	.param .u32 _Z14CylinderBoundsiPf_param_0,
	.param .u64 _Z14CylinderBoundsiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<33>;
	.reg .b32 	%r<13>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<24>;


	ld.param.u64 	%rd3, [_Z14CylinderBoundsiPf_param_1];
	ld.param.s32 	%rd6, [_Z14CylinderBoundsiPf_param_0];
	mov.u64 	%rd22, lines;
	cvta.global.u64 	%rd5, %rd22;
	mov.u32 	%r5, 1;
	mov.u32 	%r2, 8;
	mov.u64 	%rd21, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r5, %r2, %rd6, %rd21, %rd21, %rd21);
	// inline asm
	ld.v2.u32 	{%r7, %r8}, [%rd4];
	cvt.s64.s32	%rd18, %r8;
	cvt.s64.s32	%rd12, %r7;
	mov.u64 	%rd23, vertices;
	cvta.global.u64 	%rd11, %rd23;
	mov.u32 	%r6, 16;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r5, %r6, %rd12, %rd21, %rd21, %rd21);
	// inline asm
	ld.v4.f32 	{%f10, %f11, %f12, %f13}, [%rd10];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd11, %r5, %r6, %rd18, %rd21, %rd21, %rd21);
	// inline asm
	ld.v4.f32 	{%f14, %f15, %f16, %f17}, [%rd16];
	add.ftz.f32 	%f18, %f13, %f17;
	cvt.ftz.f64.f32	%fd1, %f18;
	mul.f64 	%fd2, %fd1, 0d3FE0000000000000;
	ld.global.f32 	%f19, [cylinder_radius];
	cvt.ftz.f64.f32	%fd3, %f19;
	mul.f64 	%fd4, %fd3, %fd2;
	cvt.rn.ftz.f32.f64	%f9, %fd4;
	mov.pred 	%p5, 0;
	setp.leu.ftz.f32	%p4, %f9, 0f00000000;
	@%p4 bra 	BB2_2;

	abs.ftz.f32 	%f20, %f9;
	setp.neu.ftz.f32	%p5, %f20, 0f7F800000;

BB2_2:
	cvta.to.global.u64 	%rd2, %rd3;
	@%p5 bra 	BB2_4;
	bra.uni 	BB2_3;

BB2_4:
	min.ftz.f32 	%f21, %f10, %f14;
	sub.ftz.f32 	%f22, %f21, %f9;
	min.ftz.f32 	%f23, %f11, %f15;
	sub.ftz.f32 	%f24, %f23, %f9;
	min.ftz.f32 	%f25, %f12, %f16;
	sub.ftz.f32 	%f26, %f25, %f9;
	st.global.f32 	[%rd2], %f22;
	st.global.f32 	[%rd2+4], %f24;
	st.global.f32 	[%rd2+8], %f26;
	max.ftz.f32 	%f27, %f10, %f14;
	add.ftz.f32 	%f28, %f9, %f27;
	max.ftz.f32 	%f29, %f11, %f15;
	add.ftz.f32 	%f30, %f9, %f29;
	max.ftz.f32 	%f31, %f12, %f16;
	add.ftz.f32 	%f32, %f9, %f31;
	st.global.f32 	[%rd2+12], %f28;
	st.global.f32 	[%rd2+16], %f30;
	st.global.f32 	[%rd2+20], %f32;
	bra.uni 	BB2_5;

BB2_3:
	mov.u32 	%r11, 2096152002;
	st.global.u32 	[%rd2+8], %r11;
	st.global.u32 	[%rd2+4], %r11;
	st.global.u32 	[%rd2], %r11;
	mov.u32 	%r12, -51331646;
	st.global.u32 	[%rd2+20], %r12;
	st.global.u32 	[%rd2+16], %r12;
	st.global.u32 	[%rd2+12], %r12;

BB2_5:
	ret;
}


