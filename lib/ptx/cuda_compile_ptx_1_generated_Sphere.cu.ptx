//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21124049
// Cuda compilation tools, release 8.0, V8.0.44
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_30
.address_size 64

	// .globl	_Z15SphereIntersecti
.global .align 1 .b8 spheres[1];
.global .align 1 .b8 texcoords[1];
.global .align 1 .b8 vertexcolors[1];
.global .align 4 .b8 ray[36];
.global .align 8 .b8 irec[48];
.global .align 4 .f32 sphere_radius;
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4irecE[8] = {82, 97, 121, 0, 48, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13sphere_radiusE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_typename4irecE[19] = {73, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 82, 101, 99, 111, 114, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_typename13sphere_radiusE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4irecE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13sphere_radiusE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic4irecE[15] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 105, 114, 101, 99, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic13sphere_radiusE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4irecE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13sphere_radiusE[1];

.visible .entry _Z15SphereIntersecti(
	.param .u32 _Z15SphereIntersecti_param_0
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<104>;
	.reg .b32 	%r<26>;
	.reg .b64 	%rd<48>;


	ld.param.u32 	%r1, [_Z15SphereIntersecti_param_0];
	cvt.s64.s32	%rd3, %r1;
	mov.u64 	%rd7, spheres;
	cvta.global.u64 	%rd2, %rd7;
	mov.u32 	%r2, 1;
	mov.u32 	%r3, 16;
	mov.u64 	%rd6, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r2, %r3, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.global.f32 	%f24, [sphere_radius];
	ld.v4.f32 	{%f25, %f26, %f27, %f28}, [%rd1];
	mul.ftz.f32 	%f1, %f28, %f24;
	ld.global.f32 	%f33, [ray];
	sub.ftz.f32 	%f2, %f33, %f25;
	ld.global.f32 	%f34, [ray+4];
	sub.ftz.f32 	%f3, %f34, %f26;
	ld.global.f32 	%f35, [ray+8];
	sub.ftz.f32 	%f4, %f35, %f27;
	ld.global.f32 	%f7, [ray+20];
	ld.global.f32 	%f5, [ray+12];
	ld.global.f32 	%f6, [ray+16];
	mul.ftz.f32 	%f36, %f3, %f6;
	fma.rn.ftz.f32 	%f37, %f2, %f5, %f36;
	fma.rn.ftz.f32 	%f101, %f4, %f7, %f37;
	mul.ftz.f32 	%f38, %f3, %f3;
	fma.rn.ftz.f32 	%f39, %f2, %f2, %f38;
	fma.rn.ftz.f32 	%f40, %f4, %f4, %f39;
	mul.ftz.f32 	%f9, %f1, %f1;
	sub.ftz.f32 	%f10, %f40, %f9;
	mul.ftz.f32 	%f11, %f101, %f101;
	setp.leu.ftz.f32	%p1, %f11, %f10;
	@%p1 bra 	BB0_14;

	sub.ftz.f32 	%f42, %f11, %f10;
	sqrt.approx.ftz.f32 	%f102, %f42;
	neg.ftz.f32 	%f43, %f101;
	sub.ftz.f32 	%f13, %f43, %f102;
	mul.ftz.f32 	%f14, %f11, 0f3F7FBE77;
	mov.f32 	%f103, 0f00000000;
	setp.leu.ftz.f32	%p2, %f10, %f14;
	@%p2 bra 	BB0_4;

	ld.global.f32 	%f45, [ray+12];
	ld.global.f32 	%f46, [ray+16];
	ld.global.f32 	%f47, [ray+20];
	fma.rn.ftz.f32 	%f48, %f13, %f45, %f2;
	fma.rn.ftz.f32 	%f49, %f13, %f46, %f3;
	fma.rn.ftz.f32 	%f50, %f13, %f47, %f4;
	mul.ftz.f32 	%f51, %f6, %f49;
	fma.rn.ftz.f32 	%f52, %f5, %f48, %f51;
	fma.rn.ftz.f32 	%f101, %f7, %f50, %f52;
	mul.ftz.f32 	%f53, %f49, %f49;
	fma.rn.ftz.f32 	%f54, %f48, %f48, %f53;
	fma.rn.ftz.f32 	%f55, %f50, %f50, %f54;
	sub.ftz.f32 	%f56, %f55, %f9;
	mul.ftz.f32 	%f57, %f101, %f101;
	sub.ftz.f32 	%f16, %f57, %f56;
	setp.leu.ftz.f32	%p3, %f16, 0f00000000;
	@%p3 bra 	BB0_4;

	sqrt.approx.ftz.f32 	%f102, %f16;
	neg.ftz.f32 	%f58, %f101;
	sub.ftz.f32 	%f103, %f58, %f102;

BB0_4:
	add.ftz.f32 	%f59, %f13, %f103;
	// inline asm
	call (%r4), _rt_potential_intersection, (%f59);
	// inline asm
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB0_9;

	st.global.u32 	[irec+44], %r1;
	fma.rn.ftz.f32 	%f60, %f5, %f59, %f2;
	fma.rn.ftz.f32 	%f61, %f6, %f59, %f3;
	fma.rn.ftz.f32 	%f62, %f7, %f59, %f4;
	rcp.approx.ftz.f32 	%f63, %f1;
	mul.ftz.f32 	%f64, %f60, %f63;
	mul.ftz.f32 	%f65, %f62, %f63;
	st.global.v2.f32 	[irec+8], {%f65, %f64};
	mul.ftz.f32 	%f66, %f61, %f63;
	st.global.v2.f32 	[irec+16], {%f66, %f65};
	st.global.v2.f32 	[irec], {%f64, %f66};
	mov.u64 	%rd19, texcoords;
	cvta.global.u64 	%rd9, %rd19;
	mov.u32 	%r6, 8;
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r2, %r6, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.v2.f32 	{%f67, %f68}, [%rd8];
	st.global.v2.f32 	[irec+24], {%f67, %f68};
	mov.u64 	%rd20, vertexcolors;
	cvta.global.u64 	%rd18, %rd20;
	// inline asm
	call (%rd14, %rd15, %rd16, %rd17), _rt_buffer_get_size_64, (%rd18, %r2, %r3);
	// inline asm
	cvt.u32.u64	%r9, %rd14;
	setp.eq.s32	%p5, %r9, 0;
	@%p5 bra 	BB0_7;

	// inline asm
	call (%rd21), _rt_buffer_get_64, (%rd18, %r2, %r3, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.v4.f32 	{%f71, %f72, %f73, %f74}, [%rd21];
	st.global.v2.f32 	[irec+32], {%f71, %f72};
	st.global.f32 	[irec+40], %f73;
	bra.uni 	BB0_8;

BB0_7:
	mov.u32 	%r12, 1065353216;
	st.global.u32 	[irec+40], %r12;
	mov.f32 	%f78, 0f3F800000;
	st.global.v2.f32 	[irec+32], {%f78, %f78};

BB0_8:
	mov.u32 	%r14, 0;
	// inline asm
	call (%r13), _rt_report_intersection, (%r14);
	// inline asm
	setp.ne.s32	%p6, %r13, 0;
	@%p6 bra 	BB0_14;

BB0_9:
	setp.gt.ftz.f32	%p7, %f10, %f14;
	selp.f32	%f80, %f13, 0f00000000, %p7;
	sub.ftz.f32 	%f81, %f102, %f101;
	add.ftz.f32 	%f79, %f80, %f81;
	// inline asm
	call (%r15), _rt_potential_intersection, (%f79);
	// inline asm
	setp.eq.s32	%p8, %r15, 0;
	@%p8 bra 	BB0_14;

	st.global.u32 	[irec+44], %r1;
	fma.rn.ftz.f32 	%f82, %f5, %f79, %f2;
	fma.rn.ftz.f32 	%f83, %f6, %f79, %f3;
	fma.rn.ftz.f32 	%f84, %f7, %f79, %f4;
	rcp.approx.ftz.f32 	%f85, %f1;
	mul.ftz.f32 	%f86, %f82, %f85;
	mul.ftz.f32 	%f87, %f84, %f85;
	st.global.v2.f32 	[irec+8], {%f87, %f86};
	mul.ftz.f32 	%f88, %f83, %f85;
	st.global.v2.f32 	[irec+16], {%f88, %f87};
	st.global.v2.f32 	[irec], {%f86, %f88};
	mov.u64 	%rd39, texcoords;
	cvta.global.u64 	%rd29, %rd39;
	mov.u32 	%r17, 8;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd29, %r2, %r17, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.v2.f32 	{%f89, %f90}, [%rd28];
	st.global.v2.f32 	[irec+24], {%f89, %f90};
	mov.u64 	%rd40, vertexcolors;
	cvta.global.u64 	%rd38, %rd40;
	// inline asm
	call (%rd34, %rd35, %rd36, %rd37), _rt_buffer_get_size_64, (%rd38, %r2, %r3);
	// inline asm
	cvt.u32.u64	%r20, %rd34;
	setp.eq.s32	%p9, %r20, 0;
	@%p9 bra 	BB0_12;

	// inline asm
	call (%rd41), _rt_buffer_get_64, (%rd38, %r2, %r3, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.v4.f32 	{%f93, %f94, %f95, %f96}, [%rd41];
	st.global.v2.f32 	[irec+32], {%f93, %f94};
	st.global.f32 	[irec+40], %f95;
	bra.uni 	BB0_13;

BB0_12:
	mov.u32 	%r23, 1065353216;
	st.global.u32 	[irec+40], %r23;
	mov.f32 	%f100, 0f3F800000;
	st.global.v2.f32 	[irec+32], {%f100, %f100};

BB0_13:
	mov.u32 	%r25, 0;
	// inline asm
	call (%r24), _rt_report_intersection, (%r25);
	// inline asm

BB0_14:
	ret;
}

	// .globl	_Z22SphereIntersect_robusti
.visible .entry _Z22SphereIntersect_robusti(
	.param .u32 _Z22SphereIntersect_robusti_param_0
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<104>;
	.reg .b32 	%r<26>;
	.reg .b64 	%rd<48>;


	ld.param.u32 	%r1, [_Z22SphereIntersect_robusti_param_0];
	cvt.s64.s32	%rd3, %r1;
	mov.u64 	%rd7, spheres;
	cvta.global.u64 	%rd2, %rd7;
	mov.u32 	%r2, 1;
	mov.u32 	%r3, 16;
	mov.u64 	%rd6, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r2, %r3, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.global.f32 	%f24, [sphere_radius];
	ld.v4.f32 	{%f25, %f26, %f27, %f28}, [%rd1];
	mul.ftz.f32 	%f1, %f28, %f24;
	ld.global.f32 	%f33, [ray];
	sub.ftz.f32 	%f2, %f33, %f25;
	ld.global.f32 	%f34, [ray+4];
	sub.ftz.f32 	%f3, %f34, %f26;
	ld.global.f32 	%f35, [ray+8];
	sub.ftz.f32 	%f4, %f35, %f27;
	ld.global.f32 	%f7, [ray+20];
	ld.global.f32 	%f5, [ray+12];
	ld.global.f32 	%f6, [ray+16];
	mul.ftz.f32 	%f36, %f3, %f6;
	fma.rn.ftz.f32 	%f37, %f2, %f5, %f36;
	fma.rn.ftz.f32 	%f101, %f4, %f7, %f37;
	mul.ftz.f32 	%f38, %f3, %f3;
	fma.rn.ftz.f32 	%f39, %f2, %f2, %f38;
	fma.rn.ftz.f32 	%f40, %f4, %f4, %f39;
	mul.ftz.f32 	%f9, %f1, %f1;
	sub.ftz.f32 	%f10, %f40, %f9;
	mul.ftz.f32 	%f11, %f101, %f101;
	setp.leu.ftz.f32	%p1, %f11, %f10;
	@%p1 bra 	BB1_14;

	sub.ftz.f32 	%f42, %f11, %f10;
	sqrt.approx.ftz.f32 	%f102, %f42;
	neg.ftz.f32 	%f43, %f101;
	sub.ftz.f32 	%f13, %f43, %f102;
	mul.ftz.f32 	%f14, %f11, 0f3F7FBE77;
	mov.f32 	%f103, 0f00000000;
	setp.leu.ftz.f32	%p2, %f10, %f14;
	@%p2 bra 	BB1_4;

	ld.global.f32 	%f45, [ray+12];
	ld.global.f32 	%f46, [ray+16];
	ld.global.f32 	%f47, [ray+20];
	fma.rn.ftz.f32 	%f48, %f13, %f45, %f2;
	fma.rn.ftz.f32 	%f49, %f13, %f46, %f3;
	fma.rn.ftz.f32 	%f50, %f13, %f47, %f4;
	mul.ftz.f32 	%f51, %f6, %f49;
	fma.rn.ftz.f32 	%f52, %f5, %f48, %f51;
	fma.rn.ftz.f32 	%f101, %f7, %f50, %f52;
	mul.ftz.f32 	%f53, %f49, %f49;
	fma.rn.ftz.f32 	%f54, %f48, %f48, %f53;
	fma.rn.ftz.f32 	%f55, %f50, %f50, %f54;
	sub.ftz.f32 	%f56, %f55, %f9;
	mul.ftz.f32 	%f57, %f101, %f101;
	sub.ftz.f32 	%f16, %f57, %f56;
	setp.leu.ftz.f32	%p3, %f16, 0f00000000;
	@%p3 bra 	BB1_4;

	sqrt.approx.ftz.f32 	%f102, %f16;
	neg.ftz.f32 	%f58, %f101;
	sub.ftz.f32 	%f103, %f58, %f102;

BB1_4:
	add.ftz.f32 	%f59, %f13, %f103;
	// inline asm
	call (%r4), _rt_potential_intersection, (%f59);
	// inline asm
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB1_9;

	st.global.u32 	[irec+44], %r1;
	fma.rn.ftz.f32 	%f60, %f5, %f59, %f2;
	fma.rn.ftz.f32 	%f61, %f6, %f59, %f3;
	fma.rn.ftz.f32 	%f62, %f7, %f59, %f4;
	rcp.approx.ftz.f32 	%f63, %f1;
	mul.ftz.f32 	%f64, %f60, %f63;
	mul.ftz.f32 	%f65, %f62, %f63;
	st.global.v2.f32 	[irec+8], {%f65, %f64};
	mul.ftz.f32 	%f66, %f61, %f63;
	st.global.v2.f32 	[irec+16], {%f66, %f65};
	st.global.v2.f32 	[irec], {%f64, %f66};
	mov.u64 	%rd19, texcoords;
	cvta.global.u64 	%rd9, %rd19;
	mov.u32 	%r6, 8;
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r2, %r6, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.v2.f32 	{%f67, %f68}, [%rd8];
	st.global.v2.f32 	[irec+24], {%f67, %f68};
	mov.u64 	%rd20, vertexcolors;
	cvta.global.u64 	%rd18, %rd20;
	// inline asm
	call (%rd14, %rd15, %rd16, %rd17), _rt_buffer_get_size_64, (%rd18, %r2, %r3);
	// inline asm
	cvt.u32.u64	%r9, %rd14;
	setp.eq.s32	%p5, %r9, 0;
	@%p5 bra 	BB1_7;

	// inline asm
	call (%rd21), _rt_buffer_get_64, (%rd18, %r2, %r3, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.v4.f32 	{%f71, %f72, %f73, %f74}, [%rd21];
	st.global.v2.f32 	[irec+32], {%f71, %f72};
	st.global.f32 	[irec+40], %f73;
	bra.uni 	BB1_8;

BB1_7:
	mov.u32 	%r12, 1065353216;
	st.global.u32 	[irec+40], %r12;
	mov.f32 	%f78, 0f3F800000;
	st.global.v2.f32 	[irec+32], {%f78, %f78};

BB1_8:
	mov.u32 	%r14, 0;
	// inline asm
	call (%r13), _rt_report_intersection, (%r14);
	// inline asm
	setp.ne.s32	%p6, %r13, 0;
	@%p6 bra 	BB1_14;

BB1_9:
	setp.gt.ftz.f32	%p7, %f10, %f14;
	selp.f32	%f80, %f13, 0f00000000, %p7;
	sub.ftz.f32 	%f81, %f102, %f101;
	add.ftz.f32 	%f79, %f80, %f81;
	// inline asm
	call (%r15), _rt_potential_intersection, (%f79);
	// inline asm
	setp.eq.s32	%p8, %r15, 0;
	@%p8 bra 	BB1_14;

	st.global.u32 	[irec+44], %r1;
	fma.rn.ftz.f32 	%f82, %f5, %f79, %f2;
	fma.rn.ftz.f32 	%f83, %f6, %f79, %f3;
	fma.rn.ftz.f32 	%f84, %f7, %f79, %f4;
	rcp.approx.ftz.f32 	%f85, %f1;
	mul.ftz.f32 	%f86, %f82, %f85;
	mul.ftz.f32 	%f87, %f84, %f85;
	st.global.v2.f32 	[irec+8], {%f87, %f86};
	mul.ftz.f32 	%f88, %f83, %f85;
	st.global.v2.f32 	[irec+16], {%f88, %f87};
	st.global.v2.f32 	[irec], {%f86, %f88};
	mov.u64 	%rd39, texcoords;
	cvta.global.u64 	%rd29, %rd39;
	mov.u32 	%r17, 8;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd29, %r2, %r17, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.v2.f32 	{%f89, %f90}, [%rd28];
	st.global.v2.f32 	[irec+24], {%f89, %f90};
	mov.u64 	%rd40, vertexcolors;
	cvta.global.u64 	%rd38, %rd40;
	// inline asm
	call (%rd34, %rd35, %rd36, %rd37), _rt_buffer_get_size_64, (%rd38, %r2, %r3);
	// inline asm
	cvt.u32.u64	%r20, %rd34;
	setp.eq.s32	%p9, %r20, 0;
	@%p9 bra 	BB1_12;

	// inline asm
	call (%rd41), _rt_buffer_get_64, (%rd38, %r2, %r3, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.v4.f32 	{%f93, %f94, %f95, %f96}, [%rd41];
	st.global.v2.f32 	[irec+32], {%f93, %f94};
	st.global.f32 	[irec+40], %f95;
	bra.uni 	BB1_13;

BB1_12:
	mov.u32 	%r23, 1065353216;
	st.global.u32 	[irec+40], %r23;
	mov.f32 	%f100, 0f3F800000;
	st.global.v2.f32 	[irec+32], {%f100, %f100};

BB1_13:
	mov.u32 	%r25, 0;
	// inline asm
	call (%r24), _rt_report_intersection, (%r25);
	// inline asm

BB1_14:
	ret;
}

	// .globl	_Z12SphereBoundsiPf
.visible .entry _Z12SphereBoundsiPf(
	.param .u32 _Z12SphereBoundsiPf_param_0,
	.param .u64 _Z12SphereBoundsiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<18>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [_Z12SphereBoundsiPf_param_1];
	ld.param.s32 	%rd6, [_Z12SphereBoundsiPf_param_0];
	mov.u64 	%rd10, spheres;
	cvta.global.u64 	%rd5, %rd10;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 16;
	mov.u64 	%rd9, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r1, %r2, %rd6, %rd9, %rd9, %rd9);
	// inline asm
	ld.v4.f32 	{%f6, %f7, %f8, %f9}, [%rd4];
	ld.global.f32 	%f10, [sphere_radius];
	mul.ftz.f32 	%f5, %f9, %f10;
	mov.pred 	%p5, 0;
	setp.leu.ftz.f32	%p4, %f5, 0f00000000;
	@%p4 bra 	BB2_2;

	abs.ftz.f32 	%f11, %f5;
	setp.neu.ftz.f32	%p5, %f11, 0f7F800000;

BB2_2:
	cvta.to.global.u64 	%rd2, %rd3;
	@%p5 bra 	BB2_4;
	bra.uni 	BB2_3;

BB2_4:
	sub.ftz.f32 	%f12, %f6, %f5;
	st.global.f32 	[%rd2], %f12;
	sub.ftz.f32 	%f13, %f7, %f5;
	st.global.f32 	[%rd2+4], %f13;
	sub.ftz.f32 	%f14, %f8, %f5;
	st.global.f32 	[%rd2+8], %f14;
	add.ftz.f32 	%f15, %f6, %f5;
	st.global.f32 	[%rd2+12], %f15;
	add.ftz.f32 	%f16, %f7, %f5;
	st.global.f32 	[%rd2+16], %f16;
	add.ftz.f32 	%f17, %f8, %f5;
	st.global.f32 	[%rd2+20], %f17;
	bra.uni 	BB2_5;

BB2_3:
	mov.u32 	%r3, 2096152002;
	st.global.u32 	[%rd2+8], %r3;
	st.global.u32 	[%rd2+4], %r3;
	st.global.u32 	[%rd2], %r3;
	mov.u32 	%r4, -51331646;
	st.global.u32 	[%rd2+20], %r4;
	st.global.u32 	[%rd2+16], %r4;
	st.global.u32 	[%rd2+12], %r4;

BB2_5:
	ret;
}


