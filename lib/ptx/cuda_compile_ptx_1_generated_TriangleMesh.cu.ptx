//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21124049
// Cuda compilation tools, release 8.0, V8.0.44
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_30
.address_size 64

	// .globl	_Z24TriangleMeshIntersectioni
.global .align 1 .b8 vertices[1];
.global .align 1 .b8 normals[1];
.global .align 1 .b8 triangles[1];
.global .align 1 .b8 texcoords[1];
.global .align 1 .b8 vertexcolors[1];
.global .align 4 .b8 ray[36];
.global .align 8 .b8 irec[48];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4irecE[8] = {82, 97, 121, 0, 48, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_typename4irecE[19] = {73, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 82, 101, 99, 111, 114, 100, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4irecE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic4irecE[15] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 105, 114, 101, 99, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4irecE[1];

.visible .entry _Z24TriangleMeshIntersectioni(
	.param .u32 _Z24TriangleMeshIntersectioni_param_0
)
{
	.reg .pred 	%p<14>;
	.reg .f32 	%f<157>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<105>;


	ld.param.u32 	%r1, [_Z24TriangleMeshIntersectioni_param_0];
	cvt.s64.s32	%rd6, %r1;
	mov.u64 	%rd28, triangles;
	cvta.global.u64 	%rd5, %rd28;
	mov.u32 	%r8, 1;
	mov.u32 	%r9, 12;
	mov.u64 	%rd27, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r8, %r9, %rd6, %rd27, %rd27, %rd27);
	// inline asm
	ld.s32 	%rd12, [%rd4];
	mov.u64 	%rd29, vertices;
	cvta.global.u64 	%rd11, %rd29;
	ld.s32 	%rd18, [%rd4+4];
	ld.s32 	%rd24, [%rd4+8];
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r8, %r9, %rd12, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f7, [%rd10+8];
	ld.f32 	%f8, [%rd10+4];
	ld.f32 	%f9, [%rd10];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd11, %r8, %r9, %rd18, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f10, [%rd16+8];
	ld.f32 	%f11, [%rd16+4];
	ld.f32 	%f12, [%rd16];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd11, %r8, %r9, %rd24, %rd27, %rd27, %rd27);
	// inline asm
	sub.ftz.f32 	%f13, %f12, %f9;
	sub.ftz.f32 	%f14, %f11, %f8;
	sub.ftz.f32 	%f15, %f10, %f7;
	ld.f32 	%f16, [%rd22+8];
	ld.f32 	%f17, [%rd22+4];
	ld.f32 	%f18, [%rd22];
	sub.ftz.f32 	%f19, %f9, %f18;
	sub.ftz.f32 	%f20, %f8, %f17;
	sub.ftz.f32 	%f21, %f7, %f16;
	mul.ftz.f32 	%f22, %f15, %f20;
	mul.ftz.f32 	%f23, %f14, %f21;
	sub.ftz.f32 	%f1, %f22, %f23;
	mul.ftz.f32 	%f24, %f13, %f21;
	mul.ftz.f32 	%f25, %f15, %f19;
	sub.ftz.f32 	%f2, %f24, %f25;
	mul.ftz.f32 	%f26, %f14, %f19;
	mul.ftz.f32 	%f27, %f13, %f20;
	sub.ftz.f32 	%f3, %f26, %f27;
	ld.global.f32 	%f28, [ray+12];
	ld.global.f32 	%f29, [ray+16];
	mul.ftz.f32 	%f30, %f29, %f2;
	fma.rn.ftz.f32 	%f31, %f28, %f1, %f30;
	ld.global.f32 	%f32, [ray+20];
	fma.rn.ftz.f32 	%f33, %f32, %f3, %f31;
	rcp.approx.ftz.f32 	%f34, %f33;
	ld.global.f32 	%f35, [ray];
	sub.ftz.f32 	%f36, %f9, %f35;
	ld.global.f32 	%f37, [ray+4];
	sub.ftz.f32 	%f38, %f8, %f37;
	ld.global.f32 	%f39, [ray+8];
	sub.ftz.f32 	%f40, %f7, %f39;
	mul.ftz.f32 	%f41, %f34, %f36;
	mul.ftz.f32 	%f42, %f34, %f38;
	mul.ftz.f32 	%f43, %f34, %f40;
	mul.ftz.f32 	%f44, %f29, %f43;
	mul.ftz.f32 	%f45, %f42, %f32;
	sub.ftz.f32 	%f46, %f44, %f45;
	mul.ftz.f32 	%f47, %f41, %f32;
	mul.ftz.f32 	%f48, %f43, %f28;
	sub.ftz.f32 	%f49, %f47, %f48;
	mul.ftz.f32 	%f50, %f42, %f28;
	mul.ftz.f32 	%f51, %f41, %f29;
	sub.ftz.f32 	%f52, %f50, %f51;
	mul.ftz.f32 	%f53, %f20, %f49;
	fma.rn.ftz.f32 	%f54, %f19, %f46, %f53;
	fma.rn.ftz.f32 	%f4, %f21, %f52, %f54;
	mul.ftz.f32 	%f55, %f14, %f49;
	fma.rn.ftz.f32 	%f56, %f13, %f46, %f55;
	fma.rn.ftz.f32 	%f5, %f15, %f52, %f56;
	mul.ftz.f32 	%f57, %f2, %f42;
	fma.rn.ftz.f32 	%f58, %f1, %f41, %f57;
	fma.rn.ftz.f32 	%f6, %f3, %f43, %f58;
	ld.global.f32 	%f59, [ray+32];
	setp.lt.ftz.f32	%p1, %f6, %f59;
	ld.global.f32 	%f60, [ray+28];
	setp.gt.ftz.f32	%p2, %f6, %f60;
	and.pred  	%p3, %p1, %p2;
	setp.ge.ftz.f32	%p4, %f4, 0f00000000;
	and.pred  	%p5, %p3, %p4;
	setp.ge.ftz.f32	%p6, %f5, 0f00000000;
	and.pred  	%p7, %p5, %p6;
	add.ftz.f32 	%f61, %f4, %f5;
	setp.le.ftz.f32	%p8, %f61, 0f3F800000;
	and.pred  	%p9, %p7, %p8;
	@!%p9 bra 	BB0_12;
	bra.uni 	BB0_1;

BB0_1:
	// inline asm
	call (%r10), _rt_potential_intersection, (%f6);
	// inline asm
	setp.eq.s32	%p10, %r10, 0;
	@%p10 bra 	BB0_12;

	st.global.u32 	[irec+44], %r1;
	mul.ftz.f32 	%f63, %f2, %f2;
	fma.rn.ftz.f32 	%f64, %f1, %f1, %f63;
	fma.rn.ftz.f32 	%f65, %f3, %f3, %f64;
	rsqrt.approx.ftz.f32 	%f66, %f65;
	mul.ftz.f32 	%f67, %f1, %f66;
	mul.ftz.f32 	%f68, %f2, %f66;
	mul.ftz.f32 	%f69, %f3, %f66;
	st.global.f32 	[irec+12], %f67;
	st.global.f32 	[irec+16], %f68;
	st.global.f32 	[irec+20], %f69;
	mov.u64 	%rd35, normals;
	cvta.global.u64 	%rd34, %rd35;
	// inline asm
	call (%rd30, %rd31, %rd32, %rd33), _rt_buffer_get_size_64, (%rd34, %r8, %r9);
	// inline asm
	cvt.u32.u64	%r13, %rd30;
	setp.eq.s32	%p11, %r13, 0;
	@%p11 bra 	BB0_4;

	// inline asm
	call (%rd36), _rt_buffer_get_64, (%rd34, %r8, %r9, %rd12, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f70, [%rd36+8];
	ld.f32 	%f71, [%rd36+4];
	ld.f32 	%f72, [%rd36];
	// inline asm
	call (%rd42), _rt_buffer_get_64, (%rd34, %r8, %r9, %rd18, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f73, [%rd42+8];
	ld.f32 	%f74, [%rd42+4];
	ld.f32 	%f75, [%rd42];
	// inline asm
	call (%rd48), _rt_buffer_get_64, (%rd34, %r8, %r9, %rd24, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f76, [%rd48+8];
	ld.f32 	%f77, [%rd48+4];
	ld.f32 	%f78, [%rd48];
	mul.ftz.f32 	%f79, %f5, %f78;
	mul.ftz.f32 	%f80, %f5, %f77;
	mul.ftz.f32 	%f81, %f5, %f76;
	fma.rn.ftz.f32 	%f82, %f4, %f75, %f79;
	fma.rn.ftz.f32 	%f83, %f4, %f74, %f80;
	fma.rn.ftz.f32 	%f84, %f4, %f73, %f81;
	mov.f32 	%f85, 0f3F800000;
	sub.ftz.f32 	%f86, %f85, %f4;
	sub.ftz.f32 	%f87, %f86, %f5;
	fma.rn.ftz.f32 	%f88, %f87, %f72, %f82;
	fma.rn.ftz.f32 	%f89, %f87, %f71, %f83;
	fma.rn.ftz.f32 	%f90, %f87, %f70, %f84;
	mul.ftz.f32 	%f91, %f89, %f89;
	fma.rn.ftz.f32 	%f92, %f88, %f88, %f91;
	fma.rn.ftz.f32 	%f93, %f90, %f90, %f92;
	rsqrt.approx.ftz.f32 	%f94, %f93;
	mul.ftz.f32 	%f95, %f94, %f90;
	mul.ftz.f32 	%f96, %f94, %f89;
	mul.ftz.f32 	%f97, %f94, %f88;
	st.global.v2.f32 	[irec], {%f97, %f96};
	st.global.f32 	[irec+8], %f95;
	bra.uni 	BB0_5;

BB0_4:
	ld.global.f32 	%f98, [irec+20];
	ld.global.f32 	%f99, [irec+16];
	ld.global.f32 	%f100, [irec+12];
	st.global.v2.f32 	[irec], {%f100, %f99};
	st.global.f32 	[irec+8], %f98;

BB0_5:
	mov.u64 	%rd60, texcoords;
	cvta.global.u64 	%rd59, %rd60;
	mov.u32 	%r21, 8;
	// inline asm
	call (%rd55, %rd56, %rd57, %rd58), _rt_buffer_get_size_64, (%rd59, %r8, %r21);
	// inline asm
	cvt.u32.u64	%r22, %rd55;
	setp.eq.s32	%p12, %r22, 0;
	@%p12 bra 	BB0_7;

	// inline asm
	call (%rd61), _rt_buffer_get_64, (%rd59, %r8, %r21, %rd12, %rd27, %rd27, %rd27);
	// inline asm
	ld.v2.f32 	{%f101, %f102}, [%rd61];
	// inline asm
	call (%rd67), _rt_buffer_get_64, (%rd59, %r8, %r21, %rd18, %rd27, %rd27, %rd27);
	// inline asm
	ld.v2.f32 	{%f105, %f106}, [%rd67];
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd59, %r8, %r21, %rd24, %rd27, %rd27, %rd27);
	// inline asm
	ld.v2.f32 	{%f109, %f110}, [%rd73];
	mul.ftz.f32 	%f113, %f5, %f109;
	mul.ftz.f32 	%f114, %f5, %f110;
	fma.rn.ftz.f32 	%f115, %f4, %f105, %f113;
	fma.rn.ftz.f32 	%f116, %f4, %f106, %f114;
	mov.f32 	%f117, 0f3F800000;
	sub.ftz.f32 	%f118, %f117, %f4;
	sub.ftz.f32 	%f119, %f118, %f5;
	fma.rn.ftz.f32 	%f120, %f119, %f102, %f116;
	fma.rn.ftz.f32 	%f121, %f119, %f101, %f115;
	st.global.v2.f32 	[irec+24], {%f121, %f120};
	bra.uni 	BB0_8;

BB0_7:
	mov.f32 	%f122, 0f00000000;
	st.global.v2.f32 	[irec+24], {%f122, %f122};

BB0_8:
	mov.u64 	%rd85, vertexcolors;
	cvta.global.u64 	%rd84, %rd85;
	mov.u32 	%r30, 16;
	// inline asm
	call (%rd80, %rd81, %rd82, %rd83), _rt_buffer_get_size_64, (%rd84, %r8, %r30);
	// inline asm
	cvt.u32.u64	%r31, %rd80;
	setp.eq.s32	%p13, %r31, 0;
	@%p13 bra 	BB0_10;

	// inline asm
	call (%rd86), _rt_buffer_get_64, (%rd84, %r8, %r30, %rd12, %rd27, %rd27, %rd27);
	// inline asm
	ld.v4.f32 	{%f123, %f124, %f125, %f126}, [%rd86];
	// inline asm
	call (%rd92), _rt_buffer_get_64, (%rd84, %r8, %r30, %rd18, %rd27, %rd27, %rd27);
	// inline asm
	ld.v4.f32 	{%f130, %f131, %f132, %f133}, [%rd92];
	// inline asm
	call (%rd98), _rt_buffer_get_64, (%rd84, %r8, %r30, %rd24, %rd27, %rd27, %rd27);
	// inline asm
	ld.v4.f32 	{%f137, %f138, %f139, %f140}, [%rd98];
	mul.ftz.f32 	%f144, %f5, %f137;
	mul.ftz.f32 	%f145, %f5, %f138;
	mul.ftz.f32 	%f146, %f5, %f139;
	fma.rn.ftz.f32 	%f147, %f4, %f130, %f144;
	fma.rn.ftz.f32 	%f148, %f4, %f131, %f145;
	fma.rn.ftz.f32 	%f149, %f4, %f132, %f146;
	mov.f32 	%f150, 0f3F800000;
	sub.ftz.f32 	%f151, %f150, %f4;
	sub.ftz.f32 	%f152, %f151, %f5;
	fma.rn.ftz.f32 	%f153, %f152, %f125, %f149;
	fma.rn.ftz.f32 	%f154, %f152, %f124, %f148;
	fma.rn.ftz.f32 	%f155, %f152, %f123, %f147;
	st.global.v2.f32 	[irec+32], {%f155, %f154};
	st.global.f32 	[irec+40], %f153;
	bra.uni 	BB0_11;

BB0_10:
	mov.u32 	%r38, 1065353216;
	st.global.u32 	[irec+40], %r38;
	mov.f32 	%f156, 0f3F800000;
	st.global.v2.f32 	[irec+32], {%f156, %f156};

BB0_11:
	mov.u32 	%r40, 0;
	// inline asm
	call (%r39), _rt_report_intersection, (%r40);
	// inline asm

BB0_12:
	ret;
}

	// .globl	_Z23TriangleMeshBoundingBoxiPf
.visible .entry _Z23TriangleMeshBoundingBoxiPf(
	.param .u32 _Z23TriangleMeshBoundingBoxiPf_param_0,
	.param .u64 _Z23TriangleMeshBoundingBoxiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<42>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<30>;


	ld.param.u64 	%rd3, [_Z23TriangleMeshBoundingBoxiPf_param_1];
	ld.param.s32 	%rd6, [_Z23TriangleMeshBoundingBoxiPf_param_0];
	mov.u64 	%rd28, triangles;
	cvta.global.u64 	%rd5, %rd28;
	mov.u32 	%r7, 1;
	mov.u32 	%r8, 12;
	mov.u64 	%rd27, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r7, %r8, %rd6, %rd27, %rd27, %rd27);
	// inline asm
	ld.s32 	%rd12, [%rd4];
	mov.u64 	%rd29, vertices;
	cvta.global.u64 	%rd11, %rd29;
	ld.s32 	%rd18, [%rd4+4];
	ld.s32 	%rd24, [%rd4+8];
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd12, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f3, [%rd10+8];
	ld.f32 	%f2, [%rd10+4];
	ld.f32 	%f1, [%rd10];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd18, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f6, [%rd16+8];
	ld.f32 	%f5, [%rd16+4];
	ld.f32 	%f4, [%rd16];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd24, %rd27, %rd27, %rd27);
	// inline asm
	sub.ftz.f32 	%f11, %f4, %f1;
	sub.ftz.f32 	%f12, %f5, %f2;
	sub.ftz.f32 	%f13, %f6, %f3;
	ld.f32 	%f9, [%rd22+8];
	ld.f32 	%f8, [%rd22+4];
	ld.f32 	%f7, [%rd22];
	sub.ftz.f32 	%f14, %f7, %f1;
	sub.ftz.f32 	%f15, %f8, %f2;
	sub.ftz.f32 	%f16, %f9, %f3;
	mul.ftz.f32 	%f17, %f12, %f16;
	mul.ftz.f32 	%f18, %f13, %f15;
	sub.ftz.f32 	%f19, %f17, %f18;
	mul.ftz.f32 	%f20, %f13, %f14;
	mul.ftz.f32 	%f21, %f11, %f16;
	sub.ftz.f32 	%f22, %f20, %f21;
	mul.ftz.f32 	%f23, %f11, %f15;
	mul.ftz.f32 	%f24, %f12, %f14;
	sub.ftz.f32 	%f25, %f23, %f24;
	mul.ftz.f32 	%f26, %f22, %f22;
	fma.rn.ftz.f32 	%f27, %f19, %f19, %f26;
	fma.rn.ftz.f32 	%f28, %f25, %f25, %f27;
	sqrt.approx.ftz.f32 	%f10, %f28;
	mov.pred 	%p5, 0;
	setp.leu.ftz.f32	%p4, %f10, 0f00000000;
	@%p4 bra 	BB1_2;

	abs.ftz.f32 	%f29, %f10;
	setp.neu.ftz.f32	%p5, %f29, 0f7F800000;

BB1_2:
	cvta.to.global.u64 	%rd2, %rd3;
	@%p5 bra 	BB1_4;
	bra.uni 	BB1_3;

BB1_4:
	min.ftz.f32 	%f30, %f1, %f4;
	min.ftz.f32 	%f31, %f30, %f7;
	min.ftz.f32 	%f32, %f2, %f5;
	min.ftz.f32 	%f33, %f32, %f8;
	min.ftz.f32 	%f34, %f3, %f6;
	min.ftz.f32 	%f35, %f34, %f9;
	st.global.f32 	[%rd2], %f31;
	st.global.f32 	[%rd2+4], %f33;
	st.global.f32 	[%rd2+8], %f35;
	max.ftz.f32 	%f36, %f1, %f4;
	max.ftz.f32 	%f37, %f36, %f7;
	max.ftz.f32 	%f38, %f2, %f5;
	max.ftz.f32 	%f39, %f38, %f8;
	max.ftz.f32 	%f40, %f3, %f6;
	max.ftz.f32 	%f41, %f40, %f9;
	st.global.f32 	[%rd2+12], %f37;
	st.global.f32 	[%rd2+16], %f39;
	st.global.f32 	[%rd2+20], %f41;
	bra.uni 	BB1_5;

BB1_3:
	mov.u32 	%r9, 2096152002;
	st.global.u32 	[%rd2+8], %r9;
	st.global.u32 	[%rd2+4], %r9;
	st.global.u32 	[%rd2], %r9;
	mov.u32 	%r10, -51331646;
	st.global.u32 	[%rd2+20], %r10;
	st.global.u32 	[%rd2+16], %r10;
	st.global.u32 	[%rd2+12], %r10;

BB1_5:
	ret;
}


